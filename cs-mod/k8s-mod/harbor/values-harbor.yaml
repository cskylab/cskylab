## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
##
# global:
#   imageRegistry: harbor.cskylab.net


## @param adminPassword The initial password of Harbor admin. Change it from portal after launching Harbor
##
adminPassword: "NoFear21"

## @param exposureType The way to expose Harbor. Allowed values are [ ingress \| proxy ]
## Use "proxy" to use a deploy NGINX proxy in front of Harbor services
## Use "ingress" to use an Ingress Controller as proxy
##
exposureType: ingress


## Service parameters
##
service:
  ## K8s service type
  ## Allowed values are "ClusterIP", "NodePort" or "LoadBalancer"
  ##
  type: ClusterIP

## @param externalURL The external URL for Harbor Core service
## It is used to
## 1) populate the docker/helm commands showed on portal
## 2) populate the token service URL returned to docker/notary client
##
## Format: protocol://domain[:port]. Usually:
## 1) if "exposureType" is "ingress", the "domain" should be
## the value of "ingress.hostname"
## 2) if "exposureType" is "proxy" and "service.type" is "ClusterIP",
## the "domain" should be the value of "service.clusterIP"
## 3) if "exposureType" is "proxy" and "service.type" is "NodePort",
## the "domain" should be the IP address of k8s node
## 4) if "exposureType" is "proxy" and "service.type" is "LoadBalancer",
## the "domain" should be the LoadBalancer IP
##
externalURL: https://harbor.cskylab.net

ingress:
  ## Configure the ingress resource that allows you to access Harbor Core
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ##
  core:
    ## @param ingress.core.hostname Default host for the ingress record
    ##
    hostname: harbor.cskylab.net
    ## @param ingress.core.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: ca-test-internal
      ingress.kubernetes.io/ssl-redirect: 'true'
      ingress.kubernetes.io/proxy-body-size: '0'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/proxy-body-size: '0'
    ## @param ingress.core.tls Enable TLS configuration for the host defined at `ingress.core.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `%!s(<nil>)-tls`
    ## You can:
    ##   - Use the `ingress.core.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `ingress.core.selfSigned=true`
    ##
    tls: true

  ## Configure the ingress resource that allows you to access Notary
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ##
  notary:
    ## @param ingress.notary.hostname Default host for the ingress record
    ##
    hostname: notary.harbor.cskylab.net
    ## @param ingress.notary.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: ca-test-internal
      ingress.kubernetes.io/ssl-redirect: 'true'
      ingress.kubernetes.io/proxy-body-size: '0'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/proxy-body-size: '0'
    ## @param ingress.notary.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `%!s(<nil>)-tls`
    ## You can:
    ##   - Use the `ingress.notary.secrets` parameter to create this TLS secret
    ##   - Rely on cert-manager to create it by setting the corresponding annotations
    ##   - Rely on Helm to create self-signed certificates by setting `ingress.notary.selfSigned=true`
    ##
    tls: true

## The persistence is enabled by default and a default StorageClass
## is needed in the k8s cluster to provision volumes dynamicly.
## Specify another StorageClass in the "storageClass" or set "existingClaim"
## if you have already existing persistent volumes to use
##
## For storing images and charts, you can also use "azure", "gcs", "s3",
## "swift" or "oss". Set it in the "imageChartStorage" section
##
persistence:
  enabled: true
  ## Resource Policy
  ## Setting it to "keep" to avoid removing PVCs during a helm delete operation
  ##
  resourcePolicy: 'keep'
  persistentVolumeClaim:
    ## @param persistence.persistentVolumeClaim.registry.existingClaim Name of an existing PVC to use
    ## @param persistence.persistentVolumeClaim.registry.storageClass PVC Storage Class for Harbor Registry data volume
    ## Note: The default StorageClass will be used if not defined. Set it to `-` to disable dynamic provisioning
    ## @param persistence.persistentVolumeClaim.registry.subPath The sub path used in the volume
    ## @param persistence.persistentVolumeClaim.registry.accessModes The access mode of the volume
    ## @param persistence.persistentVolumeClaim.registry.size The size of the volume
    ## @param persistence.persistentVolumeClaim.registry.annotations Annotations for the PVC
    ## @param persistence.persistentVolumeClaim.registry.selector Selector to match an existing Persistent Volume
    ##
    registry:
      existingClaim: ""
      storageClass: "harbor-registry"
      subPath: ""
      accessModes:
        - ReadWriteOnce
      size: 5Gi
      annotations: {}
      selector: {}
    ## @param persistence.persistentVolumeClaim.jobservice.existingClaim Name of an existing PVC to use
    ## @param persistence.persistentVolumeClaim.jobservice.storageClass PVC Storage Class for Harbor Jobservice data volume
    ## Note: The default StorageClass will be used if not defined. Set it to `-` to disable dynamic provisioning
    ## @param persistence.persistentVolumeClaim.jobservice.subPath The sub path used in the volume
    ## @param persistence.persistentVolumeClaim.jobservice.accessModes The access mode of the volume
    ## @param persistence.persistentVolumeClaim.jobservice.size The size of the volume
    ## @param persistence.persistentVolumeClaim.jobservice.annotations Annotations for the PVC
    ## @param persistence.persistentVolumeClaim.jobservice.selector Selector to match an existing Persistent Volume
    ##
    jobservice:
      existingClaim: ""
      storageClass: "harbor-jobservice"
      subPath: ""
      accessModes:
        - ReadWriteOnce
      size: 1Gi
      annotations: {}
      selector: {}
      ## @param persistence.persistentVolumeClaim.jobservice.scanData.existingClaim Name of an existing PVC to use
      ## @param persistence.persistentVolumeClaim.jobservice.scanData.storageClass PVC Storage Class for Harbor Jobservice scan data volume
      ## Note: The default StorageClass will be used if not defined. Set it to `-` to disable dynamic provisioning
      ## @param persistence.persistentVolumeClaim.jobservice.scanData.subPath The sub path used in the volume
      ## @param persistence.persistentVolumeClaim.jobservice.scanData.accessModes The access mode of the volume
      ## @param persistence.persistentVolumeClaim.jobservice.scanData.size The size of the volume
      ## @param persistence.persistentVolumeClaim.jobservice.scanData.annotations Annotations for the PVC
      ## @param persistence.persistentVolumeClaim.jobservice.scanData.selector Selector to match an existing Persistent Volume
      ##
      scanData:
        existingClaim: ""
        storageClass: "harbor-scandata"
        subPath: ""
        accessModes:
          - ReadWriteOnce
        size: 1Gi
        annotations: {}
        selector: {}
    ## @param persistence.persistentVolumeClaim.chartmuseum.existingClaim Name of an existing PVC to use
    ## @param persistence.persistentVolumeClaim.chartmuseum.storageClass PVC Storage Class for Chartmuseum data volume
    ## Note: The default StorageClass will be used if not defined. Set it to `-` to disable dynamic provisioning
    ## @param persistence.persistentVolumeClaim.chartmuseum.subPath The sub path used in the volume
    ## @param persistence.persistentVolumeClaim.chartmuseum.accessModes The access mode of the volume
    ## @param persistence.persistentVolumeClaim.chartmuseum.size The size of the volume
    ## @param persistence.persistentVolumeClaim.chartmuseum.annotations Annotations for the PVC
    ## @param persistence.persistentVolumeClaim.chartmuseum.selector Selector to match an existing Persistent Volume
    ##
    chartmuseum:
      existingClaim: ""
      storageClass: "harbor-chartmuseum"
      subPath: ""
      accessModes:
        - ReadWriteOnce
      size: 5Gi
      annotations: {}
      selector: {}
    ## @param persistence.persistentVolumeClaim.trivy.storageClass PVC Storage Class for Trivy data volume
    ## Note: The default StorageClass will be used if not defined. Set it to `-` to disable dynamic provisioning
    ## @param persistence.persistentVolumeClaim.trivy.accessModes The access mode of the volume
    ## @param persistence.persistentVolumeClaim.trivy.size The size of the volume
    ## @param persistence.persistentVolumeClaim.trivy.annotations Annotations for the PVC
    ## @param persistence.persistentVolumeClaim.trivy.selector Selector to match an existing Persistent Volume
    ##
    trivy:
      storageClass: "harbor-trivy"
      accessModes:
        - ReadWriteOnce
      size: 5Gi
      annotations: {}
      selector: {}


## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
##
postgresql:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 11
  auth:
    enablePostgresUser: true
    postgresPassword: "NoFear21"
  architecture: standalone
  primary:
    extendedConfiguration: |
      max_connections = 1024
    initdb:
      scripts:
        initial-notaryserver.sql: |
          CREATE DATABASE notaryserver;
          CREATE USER server;
          alter user server with encrypted password 'password';
          GRANT ALL PRIVILEGES ON DATABASE notaryserver TO server;
        initial-notarysigner.sql: |
          CREATE DATABASE notarysigner;
          CREATE USER signer;
          alter user signer with encrypted password 'password';
          GRANT ALL PRIVILEGES ON DATABASE notarysigner TO signer;
        initial-registry.sql: |
          CREATE DATABASE registry ENCODING 'UTF8';
          \c registry;
          CREATE TABLE schema_migrations(version bigint not null primary key, dirty boolean not null);
    persistence:
      enabled: true
      storageClass: harbor-postgresql
      accessModes:
        - ReadWriteOnce
      size: 8Gi


## Redis chart configuration
## ref: https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml
##
redis:
  enabled: true
  nameOverride:
  ## image:
  ##   tag:
  ## password: ""
  ##
  usePassword: false
  cluster:
    enabled: false
  master:
    persistence:
      enabled: true
      storageClass: harbor-redis
      accessModes:
        - ReadWriteOnce
      size: 8Gi
