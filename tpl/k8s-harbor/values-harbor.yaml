## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
##
# global:
#   imageRegistry: harbor.cskylab.net

## The initial password of Harbor admin. Change it from portal after launching Harbor
##
harborAdminPassword: "{{ .publishing.password }}"


## The custom ca bundle secret, the secret must contain key named "ca.crt"
## which will be injected into the trust store for chartmuseum, clair, core, jobservice, registry, trivy components
##
caBundleSecretName: harbor-certificate-secret


## Service parameters
##
service:
  ## K8s service type
  ## Allowed values are "ClusterIP", "NodePort" or "LoadBalancer"
  ##
  type: Ingress

  ## TLS parameters
  ##
  tls:
    ## Enable TLS for external access
    ## Note: When type is "Ingress" and TLS is disabled, the port must be included
    ## in the command when pulling/pushing images.
    ## ref: https://github.com/goharbor/harbor/issues/5291
    ##
    enabled: true
    ##
    ## Existing secret name containing your own TLS certificates.
    ## The secret contains keys named:
    ## "tls.crt" - the certificate (required)
    ## "tls.key" - the private key (required)
    ## "ca.crt" - the certificate of CA (optional)
    ## Self-signed TLS certificates will be used otherwise.
    ##
    existingSecret: harbor-certificate-secret
    ## By default, the Notary service will use the same certificate described above.
    ## Fill the name of secret if you want to use a separated on for Notary.
    ##
    notaryExistingSecret: harbor-certificate-secret
    ## The common name used to automatically generate the certificates.
    ## Mandatory when "secretName" is not provided or type is not "Ingress".
    ##
    commonName: '{{ .publishing.url }}'

    existingSecret: harbor-certificate-secret


## Ingress parameters
##
ingress:
  enabled: true
  hosts:
    core: {{ .publishing.url }}
    notary: notary.{{ .publishing.url }}
  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  annotations:
    kubernetes.io/ingress.class: nginx
    ingress.kubernetes.io/ssl-redirect: 'true'
    ingress.kubernetes.io/proxy-body-size: '0'
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/proxy-body-size: '0'

## The external URL for Harbor core service. It is used to
## 1) populate the docker/helm commands showed on portal
## 2) populate the token service URL returned to docker/notary client
##
## Format: protocol://domain[:port]. Usually:
## 1) if "service.type" is "ingress", the "domain" should be
## the value of "ingress.hosts.core"
## 2) if "service.type" is "clusterIP", the "domain" should be
## the value of "service.clusterIP.name"
## 3) if "service.type" is "nodePort", the "domain" should be
## the IP address of k8s node. If Harbor is deployed behind the proxy,
## set it as the URL of proxy
##
externalURL: https://{{ .publishing.url }}


## The persistence is enabled by default and a default StorageClass
## is needed in the k8s cluster to provision volumes dynamicly.
## Specify another StorageClass in the "storageClass" or set "existingClaim"
## if you have already existing persistent volumes to use
##
## For storing images and charts, you can also use "azure", "gcs", "s3",
## "swift" or "oss". Set it in the "imageChartStorage" section
##
persistence:
  enabled: true
  ## Resource Policy
  ## Setting it to "keep" to avoid removing PVCs during a helm delete operation
  ##
  resourcePolicy: 'keep'
  persistentVolumeClaim:
    registry:
      ## If you want to reuse an existing claim, you can pass the name of the PVC using
      ## the existingClaim variable
      ##
      existingClaim: ''
      ## Specify the "storageClass" used to provision the volume.
      ## Set it to "-" to disable dynamic provisioning
      ##
      storageClass: {{ .namespace.name }}-registry
      subPath: ''
      accessMode: ReadWriteOnce
      size: 5Gi
    jobservice:
      ## If you want to reuse an existing claim, you can pass the name of the PVC using
      ## the existingClaim variable
      ##
      existingClaim: ''
      ## Specify the "storageClass" used to provision the volume.
      ## Set it to "-" to disable dynamic provisioning
      ##
      storageClass: {{ .namespace.name }}-jobservice
      subPath: ''
      accessMode: ReadWriteOnce
      size: 1Gi
    chartmuseum:
      ## If you want to reuse an existing claim, you can pass the name of the PVC using
      ## the existingClaim variable
      ##
      existingClaim: ''
      ## Specify the "storageClass" used to provision the volume.
      ## Set it to "-" to disable dynamic provisioning
      ##
      storageClass: {{ .namespace.name }}-chartmuseum
      subPath: ''
      accessMode: ReadWriteOnce
      size: 5Gi
    trivy:
      storageClass: {{ .namespace.name }}-trivy
      accessMode: ReadWriteOnce
      size: 5Gi

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
##
postgresql:
  enabled: true
  postgresqlUsername: postgres
  postgresqlPassword: "{{ .publishing.password }}"
  persistence:
    enabled: true
    storageClass: {{ .namespace.name }}-postgresql
    accessModes:
      - ReadWriteOnce
    size: 8Gi

## Redis chart configuration
## ref: https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml
##
redis:
  enabled: true
  nameOverride:
  ## image:
  ##   tag:
  ## password: ""
  ##
  usePassword: false
  cluster:
    enabled: false
  master:
    persistence:
      enabled: true
      storageClass: {{ .namespace.name }}-redis
      accessModes:
        - ReadWriteOnce
      size: 8Gi
